Q1. What is Node.js?
Ans. Node.js is a runtime environment that allows developers to execute js code outside a web browser. It is widely used for building scalable, high-performance server-side applications. It uses non-blocking I/O operations to handle multiple requests efficiently, making it ideal for scalable applications.

Q2. What is the primary use of Node.js?
Ans. The primary use of Node.js is to build scalable, high-performance server-side applications, especially
real-time web applications, microservices, and enterprise software.

Q3. What is the main advantage of using Node.js?
Ans. The main advantage of using Node.js is its ability to handle a large number of concurrent connections
efficiently, making it ideal for real-time web applications and high-traffic websites.

Q4. How does Node.js works?
Ans. Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request.

Q5. How does Node.js handles asynchronous programming?
Ans. Node.js uses an event loop and callbacks to handle asynchronous programming. This allows Node.js to run tasks independently of the main program flow, which makes it more responsive and scalable.

How it works :-
Node.js starts an asynchronous task, like reading a file or making a database request.
The task runs outside of the event loop, which allows the event loop to continue processing other code.
When the task completes, its callback function is added to a queue.
The event loop checks the queue and processes the callbacks one by one.

Q6. What is NPM?
Ans. NPM (Node Package Manager) is a package manager for Node.js modules. It helps developers to manage project dependencies, scripts, and third-party libraries. By installing Node.js on your system, NPM is automatically installed, and ready to use.

Q7. What is Restful API?
Ans. RESTful API, or REST API, is an application programming interface (API) that allows two computer systems to communicate securely over the internet. REST stands for representational state transfer, and it's a set of rules that APIs must follow to be considered RESTful. RESTful APIs are a common choice for web and mobile apps because they are easy to use, scalable, and work well across different platforms.

Q8. Difference between ES5 and ES6.
Ans. Features                                ES5                             ES6
     Variable Declaration                    var                             let, const
     Function Syntax                         Regular functions               Arrow functions
     Modules                                 Common JS                       import/export
     Strings                                 Concatenation                   Template Literals
     OOP                                     Prototype-based                 class, extends
     Asynchronous Handling                   Callbacks                       Promises
     Enhanced Syntax                         Manual Handling                 Destructuring, Rest/Spread

Q9. What is express.js and next.js?
Ans. Express.js
Express.js is a lightweight and flexible web application framework for Node.js, designed for building APIs and web applications efficiently. It simplifies the process of handling HTTP requests, middleware, and routing.

Key Features of Express.js :-
Minimal and Flexible: Offers a simple way to create web servers and APIs with minimal boilerplate.
Middleware: Supports middleware functions to handle requests, responses, and error processing.
Routing: Provides a robust and dynamic routing mechanism.
Templating: Supports templating engines like EJS, Pug, and Handlebars for rendering views.
Full Control: Allows developers to customize and structure the application as they want.

Common Use Cases of Express.js
Backend APIs: Building RESTful APIs for web and mobile applications.
Single-Page Applications (SPAs): Serving as the backend for SPAs built with React, Angular, or Vue.
Middleware Server: Acting as an intermediary layer to handle business logic.

Next.js
Next.js is a React framework that extends React's capabilities with additional features like server-side rendering (SSR), static site generation (SSG), and hybrid rendering. It is used for building web applications that are fast, SEO-friendly, and scalable.

Key Features of Next.js :-
Server-Side Rendering (SSR):
Pre-renders pages on the server for better performance and SEO.
Static Site Generation (SSG):
Pre-generates static pages during build time for fast delivery.
Client-Side Rendering (CSR):
Allows dynamic functionality by running JavaScript on the client side.
Routing System:
File-based routing where the structure of the pages/ directory determines the app routes.
API Routes:
Built-in support for creating serverless API routes.
Built-In CSS and Module Support:
Allows for global CSS, CSS modules, and other styling options.
Image Optimization:
Automatic image compression and resizing with the <Image> component.

Common Use Cases of Next.js
SEO-Friendly Websites: For pages requiring server-side rendering or static generation for better SEO.
E-Commerce: Fast page loads and dynamic product pages.
Blogs and Documentation Sites: Using SSG for pre-rendered content.
Hybrid Apps: Applications that mix static and server-side rendered pages.

Q10. What is the package.json file and what it does?
Ans. The package. json file contains descriptive and functional metadata about a project, such as a name, version, and dependencies. The file provides the npm package manager with various information to help identify the project and handle dependencies.

Q11. What is an event loop?
Ans. The event loop is a key concept in JavaScript and Node.js that allows non-blocking, asynchronous programming. It handles the execution of code, collection and processing of events, and execution of queued tasks, ensuring JavaScript remains efficient despite being single-threaded.

Q12. Why Is the Event Loop Necessary?
Ans. JavaScript is single-threaded, meaning it can only execute one task at a time. However, in a real-world application, tasks like network requests, file reading, or timers take time to complete. Blocking the execution of code until these tasks finish would make JavaScript inefficient. The event loop prevents this by delegating these tasks to the underlying system and continuing to execute other code.

How Does the Event Loop Work?
The event loop operates in conjunction with:

Call Stack: A stack where function calls are added and removed during execution.
Web APIs: Provided by the browser or Node.js, these handle tasks like HTTP requests, timers, and DOM events.
Callback Queue: A queue where callbacks from asynchronous tasks are placed when ready for execution.
Microtask Queue: A high-priority queue for tasks like promises and MutationObserver.
Step-by-Step Working of the Event Loop
Add Code to the Call Stack:

JavaScript code is executed line by line and function calls are added to the call stack.
Delegate Long-Running Tasks:

When encountering an asynchronous operation (e.g., setTimeout, fetch), the event loop offloads it to the Web APIs or Node.js.
Execute Remaining Code:

While the asynchronous task runs in the background, JavaScript continues executing other synchronous code.
Move Task to Queue:

When the async operation is complete, its callback is placed in the callback queue or microtask queue.
Empty Call Stack:

The event loop continuously checks if the call stack is empty. When empty, it pushes tasks from the callback queue or microtask queue to the stack.
Prioritize Microtasks:

Microtasks (e.g., promise callbacks) are always executed before tasks in the callback queue.

Q13. What is EventEmitter?
Ans. In Node.js, an EventEmitter is a class from the events module that facilitates a publish-subscribe or observer pattern. It allows objects (emitters) to emit events and other objects (listeners) to listen for and respond to those events.

This is especially useful for handling asynchronous tasks or decoupling modules in an application.

How Does It Work?
The EventEmitter provides methods to:
Emit Events: Announce or broadcast an event.
Listen to Events: Attach listeners that will execute when the specified event is emitted.

Key Methods in EventEmitter
on(event, listener):

Attaches a listener to an event. Called every time the event is emitted.
once(event, listener):

Attaches a listener that gets called only the first time the event is emitted.
emit(event, ...args):

Emits the specified event and calls all attached listeners, passing optional arguments.
removeListener(event, listener):

Removes a specific listener from an event.
removeAllListeners(event):

Removes all listeners for a given event.
listeners(event):

Returns an array of listeners attached to the event.

Example :-
const EventEmitter = require('events');

// Create an EventEmitter instance
const emitter = new EventEmitter();

// Attach a listener to the 'message' event
emitter.on('message', (content) => {
    console.log(`Received message: ${content}`);
});

// Emit the 'message' event
emitter.emit('message', 'Hello, EventEmitter!');

Output :- Received message: Hello, EventEmitter!

Q14. What is event driven programming?
Ans. Event-driven programming in Node.js is a programming model where the application flow is determined by events and their associated listeners. In Node.js, this paradigm is fundamental, as the platform is built around the idea of responding to asynchronous events via its Event Loop.

Node.js leverages this model to efficiently handle I/O operations, network requests, timers, and custom events, making it an ideal choice for scalable, non-blocking applications.

How Event-Driven Programming Works in Node.js
Events:

Represent significant occurrences, such as a completed file read, an incoming HTTP request, or a triggered custom signal.
Emitters:

Objects (instances of EventEmitter) emit these events.
Listeners/Handlers:

Functions attached to events to handle them when emitted.
Event Loop:

The mechanism that processes and dispatches events while ensuring non-blocking execution.

Example:
const EventEmitter = require('events');

// Create an instance of EventEmitter
const emitter = new EventEmitter();

// Register a listener for the 'data' event
emitter.on('data', (info) => {
    console.log(`Received data: ${info}`);
});

// Emit the 'data' event
emitter.emit('data', 'Hello, Node.js!');
Output :- Received data: Hello, Node.js!

Q15. Is Node.js synchronous or asynchronous?
Ans. Node.js is primarily an asynchronous platform, meaning it uses asynchronous, non-blocking I/O operations by default. However, it can also support synchronous operations if needed.

Why Is Node.js Asynchronous?
Node.js is built around the concept of non-blocking, asynchronous execution, which allows it to efficiently handle many I/O operations (like reading files, querying databases, or making HTTP requests) without stalling the entire process.

In contrast to traditional synchronous operations, asynchronous operations allow Node.js to execute other tasks while waiting for time-consuming operations to complete, making the platform ideal for I/O-heavy applications like web servers.

Asynchronous Nature of Node.js
Asynchronous tasks (e.g., file reading, database queries, HTTP requests) run in the background, and their results are handled through callbacks, Promises, or async/await when the operation finishes.
While the I/O operation is in progress, Node.js can handle other tasks, making the system efficient, scalable, and capable of handling many concurrent operations.

Example:-
const fs = require('fs');

// Asynchronous file read
fs.readFile('example.txt', 'utf8', (err, data) => {
    if (err) {
        console.error('Error reading file:', err);
        return;
    }
    console.log('File content:', data);
});

// Code below executes without waiting for the file read to complete
console.log('Reading file asynchronously...');
Output :- Reading file asynchronously...

Synchronous Nature of Node.js
Although Node.js is designed to be asynchronous, it also supports synchronous operations for certain use cases. Synchronous functions block the execution until the operation completes, meaning nothing else can run during this time.

Example:-
const fs = require('fs');

// Synchronous file read (blocks the execution until complete)
const data = fs.readFileSync('example.txt', 'utf8');
console.log('File content:', data);

console.log('Finished reading file...');
Output :- File content: (contents of example.txt)
Finished reading file...

Q16. What is buffer class?
Ans. In Node.js, the Buffer class is used to handle binary data directly in memory. It allows you to work with raw binary data, which is particularly useful when dealing with I/O operations such as reading files, networking, or handling streams where the data isn't in a standard text format.

A Buffer is essentially a chunk of memory allocated outside the V8 heap, which helps Node.js interact with binary data efficiently without needing the complex overhead of JavaScript strings.

Key Characteristics of Buffers:
Memory Management:
A Buffer represents a fixed-length raw memory allocation outside the V8 heap.
Binary Data:
Buffers are used to store binary data (such as image files, video files, or network responses) in memory.
Speed and Efficiency:
Buffers are more memory-efficient and faster than using JavaScript strings to handle binary data since strings in JavaScript are UTF-16 encoded.

Example:-
// Allocate a Buffer of 10 bytes
const buffer = Buffer.alloc(10);
console.log(buffer);  // <Buffer 00 00 00 00 00 00 00 00 00 00>

Q17. What is blocking and non-blocking operations?
Ans. Blocking Operations in Node.js
A blocking operation in Node.js refers to tasks that stop the program from continuing execution until the operation is fully completed. These tasks prevent the event loop from moving on to other tasks while they are being processed.

Blocking operations are usually synchronous by nature, which means the code executes sequentially, and the program "blocks" further execution until the current task finishes.

For example, reading files or making database queries can block execution if done synchronously.

Example of a Blocking Operation (Synchronous in Node.js):
const fs = require('fs');

// Synchronous (blocking) file reading
console.log('Before file read');
const data = fs.readFileSync('example.txt', 'utf8'); // Blocking
console.log('File content:', data);
console.log('After file read');

Output:- Before file read
(File data is printed here, but Node is blocked until it finishes reading)
File content: (content of example.txt)
After file read

Key Characteristics of Blocking Operations:
The code execution halts until the current task finishes.
Typically used with synchronous functions.
Causes delay in handling other tasks while it’s waiting for the operation to complete.

Non-Blocking Operations in Node.js
A non-blocking operation allows the program to continue executing other tasks without waiting for the completion of the current operation. It performs I/O tasks in the background, meaning the event loop does not get blocked, and Node.js can handle other events (like HTTP requests, user inputs, etc.) while waiting for the operation to finish.

Non-blocking operations are primarily asynchronous in nature. This is the default behavior in Node.js for handling I/O.

Example of a Non-Blocking Operation (Asynchronous in Node.js):
const fs = require('fs');

// Asynchronous (non-blocking) file reading
console.log('Before file read');
fs.readFile('example.txt', 'utf8', (err, data) => {  // Non-blocking
    if (err) throw err;
    console.log('File content:', data);
});
console.log('After file read');

Output:- Before file read
After file read
(File content will be printed after the I/O operation completes)
File content: (content of example.txt)

Key Characteristics of Non-Blocking Operations:
The code does not wait for the operation to complete, allowing other tasks to be processed in the meantime.
Asynchronous functions often take a callback, Promise, or use async/await to handle the result when the task finishes.
The event loop continues executing, making the application more efficient, especially in I/O-bound operations.

Q18. What are the modules in Node.js?
Ans. In Node.js, modules are independent blocks of code that encapsulate specific functionality, allowing developers to reuse and organize code more effectively. Node.js provides several built-in modules, and developers can also create their own custom modules. These modules are an essential feature of Node.js because they promote modularization, code reuse, and maintainability.

Here are the main types of modules in Node.js:

1. Core Modules
These are the built-in modules in Node.js that are included by default. You don't need to install them separately. Some key core modules include:

http: Provides utilities for creating web servers and making HTTP requests.
fs (File System): Allows interacting with the file system for reading, writing, and managing files.
path: Provides utilities for working with file and directory paths.
url: Helps with parsing and working with URLs.
os: Provides information about the operating system, such as memory, CPU, and platform details.
events: Helps in working with events and the EventEmitter class.
stream: Implements stream interfaces for reading/writing data in chunks.
crypto: Includes utilities for cryptography, such as encryption and hashing.
util: Includes various utility functions to simplify tasks like formatting strings and inspecting objects.
module: Provides functionality to interact with Node.js modules.
assert: Provides a simple way to test assumptions in your code, mostly for testing purposes.

2. External Modules
These are modules developed by the Node.js community, typically hosted on npm (Node Package Manager). You need to install these modules using npm or yarn. Some commonly used external modules include:

express: A web framework for building web applications and APIs.
mongoose: An ODM (Object Data Modeling) library for MongoDB, helpful in working with databases in a structured way.
axios: A promise-based HTTP client for making API requests.
lodash: A library providing utility functions for working with arrays, objects, and other data types.
dotenv: Loads environment variables from a .env file into process.env.
jsonwebtoken: Used to generate and verify JSON Web Tokens for secure authentication.
bcryptjs: A library for hashing passwords securely.
nodemon: A tool that automatically restarts your Node.js application during development when file changes are detected.

3. Custom Modules
These are modules that developers create in their projects. You can organize your own code by breaking it up into reusable files. To create and use a custom module:

Create a JavaScript or TypeScript file containing your code.
Export the functionality using module.exports or exports in CommonJS, or use ES Modules (export / import).
Import the module in another file using require (for CommonJS modules) or import (for ES Modules).

Example of a Custom Module:
math.js
module.exports.add = (a, b) => a + b;
module.exports.subtract = (a, b) => a - b;

app.js
const math = require('./math'); // Import the custom module
console.log(math.add(2, 3)); // 5
console.log(math.subtract(5, 2)); // 3

Q19. What is callback function in Node.js?
Ans. A callback function in Node.js is a function that is passed as an argument to another function and is executed after the completion of the operation to which it is associated. It is a fundamental concept in asynchronous programming in Node.js, allowing the program to handle tasks without blocking the execution of other code.

Key Points:
Asynchronous Execution:

Node.js uses callbacks to handle asynchronous operations such as reading files, making HTTP requests, or interacting with databases.
This avoids blocking the main thread, ensuring high performance and responsiveness.
Passing Functions as Arguments:

The callback function is passed as an argument to the asynchronous function.
Once the task is complete, the asynchronous function "calls back" to execute the callback function.
Error-First Callback Pattern:

In Node.js, callbacks often follow the "error-first" convention.
The first argument in the callback is typically an error object (or null if there's no error), and the subsequent arguments are the results of the operation.

Example:-

const fs = require('fs');

fs.readFile('example.txt', 'utf8', (err, data) => {
    if (err) {
        console.error('Error reading file:', err);
        return;
    }
    console.log('File contents:', data);
});

Q20. What is callback?
Ans. A callback is a function passed as an argument to another function, which is then invoked within the outer function to complete some kind of routine or action.

In programming, callbacks are used to handle tasks asynchronously or to allow functions to be more flexible and reusable by passing behavior (in the form of the callback) into them.

Key Features of a Callback:
Function as an Argument:

A callback is a function passed into another function as an argument.
Execution Later:

It is executed at a later time, either immediately, after a certain condition is met, or when an asynchronous operation completes.
Customizable Behavior:

Allows the behavior of a function to be customized by defining what the callback does.

Types of Callbacks:
Synchronous Callback:

Executed immediately as part of the function call.
Example:

function greet(name, callback) {
    console.log("Hello, " + name);
    callback();
}

greet("Alice", () => {
    console.log("This is the callback function.");
});
Output :- Hello, Alice
This is the callback function.

Asynchronous Callback:

Executed after an asynchronous operation completes.
Example (Node.js with setTimeout):

function doSomethingAsync(callback) {
    setTimeout(() => {
        console.log("Async operation complete.");
        callback();
    }, 1000);
}

doSomethingAsync(() => {
    console.log("This is the callback.");
});
Output:- Async operation complete.
This is the callback.

Why Use Callbacks?

Flexibility: Makes functions reusable by allowing different behaviors through custom callbacks.
Asynchronous Programming: Crucial in environments like Node.js to handle non-blocking I/O operations.
Code Modularity: Keeps code clean and modular by separating tasks into functions.

Q21. What is callback hell?
Ans. Callback Hell refers to a situation in programming, especially in JavaScript, where multiple nested callback functions make the code difficult to read, debug, and maintain. It occurs when you have numerous asynchronous operations that depend on each other and are executed sequentially, leading to deeply nested and convoluted code.

Example:-

doTask1((err, result1) => {
    if (err) {
        console.error('Error in Task 1:', err);
        return;
    }
    doTask2(result1, (err, result2) => {
        if (err) {
            console.error('Error in Task 2:', err);
            return;
        }
        doTask3(result2, (err, result3) => {
            if (err) {
                console.error('Error in Task 3:', err);
                return;
            }
            console.log('Final result:', result3);
        });
    });
});

Q22. What is the difference between run time and compile time errors?
Ans. 1. Compile-Time Errors
Definition: These are errors detected by the compiler during the compilation phase (before the program runs).
Nature:
Related to syntax, type checking, and other language rules.
Occur due to incorrect use of language constructs.
Examples:
Missing a semicolon in a language where it is required.
Using a variable that hasn’t been declared.
Passing the wrong type of argument to a function.
Detection: The program won't run until these errors are fixed.
Type of Feedback: Specific error messages provided by the compiler.
Solution Approach: Fix errors based on the compiler’s messages.

2. Runtime Errors
Definition: These are errors that occur during the execution of a program after it has been successfully compiled.
Nature:
Related to logical issues, invalid operations, or unforeseen input or situations.
Occur in response to the state of the program's environment or data.
Examples:
Dividing by zero.
Null pointer or undefined variable access.
Running out of memory.
File not found or invalid user input.
Detection: The program compiles successfully but crashes or behaves unexpectedly during execution.
Type of Feedback: Debugger or runtime environment messages or logs.
Solution Approach: Debugging the code, adding validation and exception handling.

Q23. What is promise?
Ans. JavaScript Promises make handling asynchronous operations like API calls, file loading, or time delays easier. Think of a Promise as a placeholder for a value that will be available in the future. It can be in one of three states:

Pending: The task is in initial state.
Fulfilled: The task completed successfully, and the result is available.
Rejected: The task failed, and an error is provided.

Example:-
let promise = new Promise((resolve, reject) => {
  // Perform an operation (e.g., API request, file reading)
  let success = true; // Simulating an operation's outcome

  if (success) {
    resolve("Operation successful!"); // Fulfilled
  } else {
    reject("Operation failed."); // Rejected
  }
});

// Consuming the promise
promise
  .then(result => {
    console.log(result); // Handles the success case
  })
  .catch(error => {
    console.error(error); // Handles the failure case
  });

Q24. How do we handle errors in the promise?
Ans. To handle any errors that may occur in the chain, you can add a call to catch at the end of the chain. If any of the Promise s are rejected, this catch handler will run, and the rest of the chain is skipped.
Example:-
let promise = new Promise((resolve, reject) => {
  let success = false; // Simulate operation result
  if (success) {
    resolve("Operation successful!");
  } else {
    reject("Operation failed.");
  }
});

promise
  .then(result => {
    console.log(result);
  })
  .catch(error => {
    console.error("Error caught:", error);
  });

Q25. What is thread pool?
Ans. A thread pool in Node.js is a group of worker threads that handle tasks that would otherwise block the main thread.
Purpose:
The thread pool allows Node.js to handle CPU-intensive tasks efficiently, keeping the main thread responsive to other requests and events. 
How it works:
The thread pool is used to perform long-running operations in the background, without blocking the main thread. 
Benefits:
The thread pool allows Node.js to be asynchronous and non-blocking, which can help create scalable and responsive applications. 
How it's implemented:
The Libuv library provides multithreading to Node.js, which allows for the creation of a thread pool. The default size of the thread pool is 4, but it can be changed at startup time.

Q26. Can we access the node through DOM?
Ans. No, Node.js and the DOM (Document Object Model) are fundamentally different, and you cannot directly access the DOM through Node.js. Here's why:

Key Differences:
Node.js:
It is a runtime environment for executing JavaScript code on the server side.
It does not have built-in support for the DOM since it does not execute in a browser context.
Node.js is designed for handling backend operations like file system access, networking, databases, and server-side logic.

DOM:
The DOM is a programming interface for web documents, representing the structure of an HTML or XML document.
It is primarily accessible through JavaScript in a web browser.
The DOM allows you to manipulate the structure, style, and content of a web page (e.g., via document.querySelector).

Q27. Importance and difference between monolithic and microservice architecture?
Ans. Importance of Software Architecture
Software architecture plays a crucial role in determining the scalability, maintainability, and performance of an application. Two commonly used architectures are Monolithic Architecture and Microservice Architecture, each with its own strengths and limitations.

Monolithic Architecture:-
Definition:
A monolithic application is built as a single, unified unit.
All the functionalities (e.g., UI, business logic, database access) are tightly coupled and run in a single process or application.
Characteristics:

Tightly Coupled:
All components (e.g., modules) are interconnected and dependent on each other.
Single Deployment Unit:
Entire application is built, deployed, and scaled as a whole.

Advantages:
Simplicity:
Easy to develop and deploy for small applications.
Performance:
Communication between modules occurs in-process, making it faster than inter-service communication.
Single Codebase:
Easier for smaller teams to manage a unified codebase.

Disadvantages:
Scaling:
Scaling the whole application to handle increased load is less efficient.
Development Bottlenecks:
A change in one module may require rebuilding and testing the entire application.
Technology Constraints:
Limited flexibility to use different programming languages or tools for different parts of the application.

Microservice Architecture

Definition:
A microservice application is composed of independent, loosely coupled services, each responsible for a specific business function.
Each microservice can be developed, deployed, and scaled independently.

Characteristics:
Loosely Coupled:
Microservices communicate over the network using APIs, often with protocols like HTTP or gRPC.
Independent Deployment:
Each service can be deployed and updated without affecting the others.

Advantages:
Scalability:
Specific services can be scaled independently based on their resource requirements.
Resilience:
A failure in one service typically doesn’t affect others.
Technological Diversity:
Each service can be developed using the best-suited programming language, database, or tools.
Faster Deployment:
Smaller teams can independently work on specific services.

Disadvantages:
Complexity:
Managing multiple services introduces operational overhead (e.g., service discovery, API management, distributed logging).
Communication Overhead:
Network latency can become a concern due to inter-service communication.
Data Consistency:
Maintaining consistency across distributed services can be challenging.

